import { useState } from 'react';

const useFormState = () => {
  const [formState, setFormState] = useState({
    name: { value: '', isValid: false },
    startDate: { value: '', isValid: false },
    endDate: { value: '', isValid: false },
  });

  // Generalized input change handler
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    let isValid = true; // Basic validation logic; customize as needed
    
    // Example validation logic
    if (value.trim() === '') {
      isValid = false;
    } else if (name === 'startDate' || name === 'endDate') {
      // Add any date-specific validation here if needed
      isValid = new Date(value) instanceof Date && !isNaN(new Date(value).getTime());
    }

    setFormState(prevState => ({
      ...prevState,
      [name]: { value, isValid },
    }));
  };

  return [formState, handleInputChange];
};

export default useFormState;



import React from 'react';
import useFormState from './useFormState'; // Adjust the import path as needed
import MDInput from 'components/MDInput'; // Adjust the import path as needed

function MyFormComponent() {
  const [formState, handleInputChange] = useFormState();

  const handleSubmit = (e) => {
    e.preventDefault();
    // Check if all fields are valid before submitting
    const allValid = Object.values(formState).every(field => field.isValid);
    if (!allValid) {
      console.error("Validation failed.");
      return;
    }
    console.log("Form submitted:", formState);
    // Submit form logic here
  };

  return (
    <form onSubmit={handleSubmit}>
      <MDInput
        name="name"
        value={formState.name.value}
        onChange={handleInputChange}
        error={!formState.name.isValid}
        helperText={!formState.name.isValid ? "Name is required" : ""}
        // Add any additional props required by MDInput for styling or functionality
      />
      <MDInput
        name="startDate"
        type="date"
        value={formState.startDate.value}
        onChange={handleInputChange}
        error={!formState.startDate.isValid}
        helperText={!formState.startDate.isValid ? "Start Date is required" : ""}
        // Additional props...
      />
      <MDInput
        name="endDate"
        type="date"
        value={formState.endDate.value}
        onChange={handleInputChange}
        error={!formState.endDate.isValid}
        helperText={!formState.endDate.isValid ? "End Date is required" : ""}
        // Additional props...
      />
      <button type="submit">Submit</button>
    </form>
  );
}

export default MyFormComponent;